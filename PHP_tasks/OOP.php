<?php
class Animal{
    var $name;
    var $color;
    var $age;
    function __construct($name, $color, $age){
        $this->name = $name;
        $this->color = $color;
        $this->age = $age;
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param mixed $name
     */
    public function setName($name): void
    {
        $this->name = $name;
    }

    /**
     * @return mixed
     */
    public function getColor()
    {
        return $this->color;
    }

    /**
     * @param mixed $color
     */
    public function setColor($color): void
    {
        $this->color = $color;
    }

    /**
     * @return mixed
     */
    public function getAge()
    {
        return $this->age;
    }

    /**
     * @param mixed $age
     */
    public function setAge($age): void
    {
        $this->age = $age;
    }

    public function makeNoise(){
        echo "Hrsshhhhh....Hrsshhhhh.....<br>";
    }
}
class Cat extends Animal{
    var $hasTail;
    var $realAge;
    function __construct($name, $color, $age, $hasTail){
        parent::__construct($name, $color, $age);
        $this->realAge = $this->age * 4;
        $this->hasTail = $hasTail;
    }
    public function makeNoise()
    {
        parent::makeNoise(); // TODO: Change the autogenerated stub
        echo "Meow!!!<br>";
    }
    /**
     * @return mixed
     */
    public function getHasTail()
    {
        return $this->hasTail;
    }

    /**
     * @param mixed $hasTail
     */
    public function setHasTail($hasTail): void
    {
        $this->hasTail = $hasTail;
    }
    /**
     * @return mixed
     */
    public function getRealAge()
    {
        return $this->realAge;
    }

}
class Singleton
{
    private static ?Singleton $instance = null;

    private function __construct()
    {
    }

    private function __clone()
    {
        throw new Exception('Cannot clone singleton.');
    }

    public function __wakeup()
    {
        throw new Exception("Cannot unserialize singleton");
    }

    public static function getInstance()
    {
        if (self::$instance == null) {
            self::$instance = new Singleton();
        }
        return self::$instance;
    }
}
$barsik = new Cat("Barsik", "white",12, true);
$barsik->makeNoise();
echo "Real age of " . $barsik->getName() . ": " . $barsik->getRealAge() . "<br>";
echo "Human age of " . $barsik->getName() . ": " . $barsik->getAge() . "<br><br>";

$firstCall = Singleton::getInstance();
$secondCall = Singleton::getInstance();
var_dump($firstCall === $secondCall);
